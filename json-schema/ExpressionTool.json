{
    "$schema": "http://json-schema.org/draft-04/schema#",
    "type": "object",
    "properties": {
        "id": {
            "description": "The unique identifier for this process object.",
            "type": "string"
        },
        "requirements": {
            "description": "Declares requirements that apply to either the runtime environment or the\n\nworkflow engine that must be met in order to execute this process.  If\n\nan implementation cannot satisfy all requirements, or a requirement is\n\nlisted which is not recognized by the implementation, it is a fatal\n\nerror and the implementation must not attempt to run the process,\n\nunless overridden at user option.",
            "type": "array",
            "items": {            
                "$ref": "Process.json#/definitions/Requirement"
            }
        },
        "hints": {
            "description": "Declares hints applying to either the runtime environment or the\n\nworkflow engine that may be helpful in executing this process.  It is\n\nnot an error if an implementation cannot satisfy all hints, however\n\nthe implementation may report a warning.",
            "type": "array",
            "items": {}
        },
        "label": {
            "description": "A short, human-readable label of this process object.",
            "type": "string"
        },
        "doc": {
            "description": "A long, human-readable description of this process object.",
            "type": "string"
        },
        "cwlVersion": {
            "description": "CWL document version. Always required at the document root. Not\n\nrequired for a Process embedded inside another Process.",
            "$ref": "Process.json#/definitions/CWLVersion"
        },
        "class": {
            "type": "string",
            "enum": [
                "ExpressionTool"
            ]
        },
        "expression": {
            "description": "The expression to execute.  The expression must return a JSON object which\n\nmatches the output parameters of the ExpressionTool.",
            "type": "string"
        },
        "outputs": {
            "description": "Defines the parameters representing the output of the process.  May be\n\nused to generate and/or validate the output object.",
            "type": "array",
            "items": {
                "$ref": "#/definitions/ExpressionToolOutputParameter"
            }
        },
        "inputs": {
            "description": "Defines the input parameters of the process.  The process is ready to\n\nrun when all required input parameters are associated with concrete\n\nvalues.  Input parameters include a schema for each parameter which is\n\nused to validate the input object.  It may also be used to build a user\n\ninterface for constructing the input object.",
            "type": "array",
            "items": {
                "$ref": "Process.json#/definitions/InputParameter"
            }
        }
    },
    "required": [
        "class",
        "expression",
        "outputs",
        "inputs"
    ],
    "definitions": {
        "ExpressionToolOutputParameter": {
            "type": "object",
            "properties": {
                "type": {
                    "description": "Specify valid types of data that may be assigned to this parameter.",
                    "$ref": "Process.json#/definitions/CwlType"
                },
                "outputBinding": {
                    "$ref": "Process.json#/definitions/OutputBinding",
                    "description": "Describes how to handle the outputs of a process."
                },
                "id": {
                    "description": "The unique identifier for this parameter object.",
                    "type": "string"
                },
                "secondaryFiles": {
                    "description": "Only valid when `type: File` or is an array of `items: File`.\n\n\n\nDescribes files that must be included alongside the primary file(s).\n\n\n\nIf the value is an expression, the value of `self` in the expression\n\nmust be the primary input or output File to which this binding applies.\n\n\n\nIf the value is a string, it specifies that the following pattern\n\nshould be applied to the primary file:\n\n\n\n1. If string begins with one or more caret `^` characters, for each\n\ncaret, remove the last file extension from the path (the last\n\nperiod `.` and all following characters).  If there are no file\n\nextensions, the path is unchanged.\n\n2. Append the remainder of the string to the end of the file path.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "format": {
                    "description": "Only valid when `type: File` or is an array of `items: File`.\n\n\n\nFor input parameters, this must be one or more IRIs of concept nodes\n\nthat represents file formats which are allowed as input to this\n\nparameter, preferrably defined within an ontology.  If no ontology is\n\navailable, file formats may be tested by exact match.\n\n\n\nFor output parameters, this is the file format that will be assigned to\n\nthe output parameter.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "streamable": {
                    "description": "Only valid when `type: File` or is an array of `items: File`.\n\n\n\nA value of `true` indicates that the file is read or written\n\nsequentially without seeking.  An implementation may use this flag to\n\nindicate whether it is valid to stream file contents using a named\n\npipe.  Default: `false`.",
                    "type": "boolean"
                },
                "doc": {
                    "description": "A documentation string for this type, or an array of strings which should be concatenated.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "label": {
                    "description": "A short, human-readable label of this object.",
                    "type": "string"
                }
            },
            "required": ["id"]
        }
    }
}